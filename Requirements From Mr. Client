Assignment Description: Your task is to get the vending machine to correctly react to coin insertions and button presses
Mr. Client says: "There is no need to be fancy at this point.  Don't return change.  Don't turn on notification lights.  
                  Don't print out meaningful messages to the VM's display."
                  
                  
                  Summary of info so far:
                  -Can use $2.50 for pop prices for now for testing purposes
                  -Standard Canadian coins for now (ie. 5, 10, 25, 100, 200 cent values)
                  -Offering 6 pop options for now
                  -Keep track of how much money has been entered
                    -Pressing button without enough money -> Nothing happens
                    -Otherwise -> vend pop, subtract cost from total
                    
                  -Coin racks hold 15 each
                  -Each rack holds 10 pop cans
                  -Current hardware setup should hold about 200 coins



                --  Note: Many of these are subject to change at a later date, so we should make sure our program can 
                          be flexible to account for future changes --
                  
                  
                  
---------------------------Q&A's from D2L Discussion Forum----------------------------------------------------------               
                  
"Prices need to be set by our clients, and these can change over time along with which kinds of pop are sold.
Longer term, there will need to be a way for the clients (or their technicians) to set this up and to change it.
For now, you can use $2.50 for testing purposes.
Both coin receptacles hold about 200 coins.  The coin racks hold 15 each."

"You need to keep track of how much money has been entered in the machine, and how much of it has been used.
If there isn't enough money for a pop, pressing a selection button shouldn't do anything. 
Otherwise, the pop should be vended and its cost should be subtracted from the total available."



"The logic that you need to implement just deals with button presses and coin entries,
dispensing the appropriate pop when appropriate and possible.
All other aspects (change, display, signal lights, etc.) are for future extensions."

"You should implement JUnit test cases to unit test your logic. 
You should also implement system tests to test the hardware with the software installed.  Yes, the test suite is a deliverable."
           
           

1. How many coins does the maschine need to store?
"Our current hardware setup should hold about 200 coins.  Some components may get replaced in future, as we are looking at our options."

2. Currency: 
"Standard Canadian coins at this point.  We'll be looking to expand into other markets later."


4.How many pop options are we offering? 
"6 for now.  Expect this to change for some versions of machine."

5.What is the maximum number of pop cans per machine/slot?
Each pop rack holds 10 pop cans.

6. When is a transaction completed? 
"Transactions don't make much sense here.  There is money entered in the machine.
Someone selects a pop.  This will sometimes change how much money there is in the machine."

7. No.  In fact, the hardware deals with this, according to how it is configured.

8.Do you want a demonstration of multiple buttons working, or just a proof of concept for one button?
"We want to see it working for the configuration I mentioned above."

9.Is it possible to cancel a transaction? 
"See 6.  Later, there may be a "Return coins button" ... we're still considering if that makes sense to us."

10.Since we’re not using indicator lights or display messages, what happens if you do not insert enough coins? 
What about if the pop you want is out? What about if it’s invalid input(e.g. You press a button that is not connected to any pop) ?
"For now, the user will only see that a pop is returned or not.  If there is no pop in a rack, they should not get charged for it.
This is for the proof of concept; it will definitely change later."
